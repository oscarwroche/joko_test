name: psqueues
version: 0.2.7.1
id: psqueues-0.2.7.1-ISRXKNv4rmf1cREUWkaDC8
key: psqueues-0.2.7.1-ISRXKNv4rmf1cREUWkaDC8
license: BSD-3-Clause
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
synopsis: Pure priority search queues
description:
    The psqueues package provides
    <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
    three different flavors.
    .
    * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
    deletion and lookup. This implementation is based on Ralf Hinze's
    <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
    Hence, it is similar to the
    <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
    considerably faster and provides a slightly different API.
    .
    * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
    to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
    (like @IntMap@) with an additional min-heap property.
    .
    * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
    simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
    hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
    this implementation is comparable to that of @IntPSQ@, but it is more widely
    applicable since the keys are not restricted to @Int@, but rather to any
    @Hashable@ datatype.
    .
    Each of the three implementations provides the same API, so they can be used
    interchangeably. The benchmarks show how they perform relative to one
    another, and also compared to the other Priority Search Queue
    implementations on Hackage:
    <http://hackage.haskell.org/package/PSQueue PSQueue>
    and
    <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
    .
    <<http://i.imgur.com/KmbDKR6.png>>
    .
    <<http://i.imgur.com/ClT181D.png>>
    .
    Typical applications of Priority Search Queues include:
    .
    * Caches, and more specifically LRU Caches;
    .
    * Schedulers;
    .
    * Pathfinding algorithms, such as Dijkstra's and A*.
category: Data Structures
abi: 0c97d2b6f2d2549cb8b05c598727eff7
exposed: True
exposed-modules:
    Data.HashPSQ Data.IntPSQ Data.OrdPSQ
hidden-modules: Data.BitUtil Data.HashPSQ.Internal
                Data.IntPSQ.Internal Data.OrdPSQ.Internal
import-dirs: /Users/oscarroche/dev/joko_test/.cabal-sandbox/lib/x86_64-osx-ghc-8.4.3/psqueues-0.2.7.1-ISRXKNv4rmf1cREUWkaDC8
library-dirs: /Users/oscarroche/dev/joko_test/.cabal-sandbox/lib/x86_64-osx-ghc-8.4.3/psqueues-0.2.7.1-ISRXKNv4rmf1cREUWkaDC8
dynamic-library-dirs: /Users/oscarroche/dev/joko_test/.cabal-sandbox/lib/x86_64-osx-ghc-8.4.3
data-dir: /Users/oscarroche/dev/joko_test/.cabal-sandbox/share/x86_64-osx-ghc-8.4.3/psqueues-0.2.7.1
hs-libraries: HSpsqueues-0.2.7.1-ISRXKNv4rmf1cREUWkaDC8
depends:
    base-4.11.1.0 deepseq-1.4.3.0
    hashable-1.2.7.0-3hrKWzET808E40baaqgc23 ghc-prim-0.5.2.0
abi-depends: base-4.11.1.0=9a0c3f2e1a5f37ec204ea9ce61813e50
             deepseq-1.4.3.0=ac68a0eb0e9076d20502e3c4e41cc80e
             hashable-1.2.7.0-3hrKWzET808E40baaqgc23=95b923163a99326dca5fcfe98f4b4dd1
             ghc-prim-0.5.2.0=39dc2488936298f474639901f9105eec
haddock-interfaces: /Users/oscarroche/dev/joko_test/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.4.3/psqueues-0.2.7.1/html/psqueues.haddock
haddock-html: /Users/oscarroche/dev/joko_test/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.4.3/psqueues-0.2.7.1/html
